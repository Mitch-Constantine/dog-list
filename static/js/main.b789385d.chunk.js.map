{"version":3,"sources":["DogList.js","DogEdit.js","App.js","serviceWorker.js","index.js"],"names":["DogList","props","index","this","onSelectedChange","dogItems","dogs","map","dog","type","className","selected","key","onClick","handleClick","name","alias","breed","React","Component","DogEdit","state","onChange","bind","initialValues","validationSchema","Yup","required","onSubmit","values","setSubmitting","setTimeout","alert","JSON","stringify","style","display","width","htmlFor","App","error","isLoaded","items","onDogChange","setState","newItems","fetch","then","res","json","result","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b789385d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class DogList extends React.Component {\r\n\t\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.props = props;\r\n\t}\r\n\t\r\n\thandleClick(index) {\r\n\t\tif (this.props.onSelectedChange) {\r\n\t\t\tthis.props.onSelectedChange(index);\r\n\t\t}\t\r\n\t}\r\n\t\r\n\trender() {\r\n\t\t\t\t\t\r\n\t\tlet dogItems = this.props.dogs.map( (dog,index)=>\r\n\t\t\t<button \r\n\t\t\t\ttype=\"button\" \r\n\t\t\t\tclassName={\"list-group-item list-group-item-action \" + ((+this.props.selected === index) ? \" active\" : \"\")} \r\n\t\t\t\tkey={index}\t\t\t\t\t\r\n\t\t\t\tonClick={()=>this.handleClick(index)}\r\n\t\t\t>\r\n\t\t\t\t{dog.name} ({dog.alias || (\"just \" + dog.name)}), {dog.breed}\r\n\t\t\t</button>\r\n\t\t);\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div className=\"list-group\">\r\n\t\t\t\t{dogItems}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nexport default class DogEdit extends React.Component {\r\n\t\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.props = props;\r\n\t\t\r\n\t\tthis.state = {dog: props.dog  ? {...props.dog} : { name: \"\", alias: \"\", breed: \"\" }};\r\n\t\t\r\n\t\tthis.onChange = this.onChange.bind(this);\r\n\t}\t\r\n\t\r\n\tonChange(dog) {\r\n\t\tif (this.props.onChange)\r\n\t\t\tthis.props.onChange(dog);\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Formik\r\n\t\t\t\tinitialValues={{ name: this.state.dog.name, alias: this.state.dog.alias, breed: this.state.dog.breed }}\r\n\t\t\t\tvalidationSchema={Yup.object({\r\n\t\t\t\t\tname: Yup.string()\r\n\t\t\t\t\t  .required('*'),\r\n\t\t\t\t\talias: Yup.string(),\r\n\t\t\t\t\tbreed: Yup.string()\r\n\t\t\t\t\t  .required('*')\r\n\t\t\t\t})}\r\n\t\t\t\tonSubmit={(values, { setSubmitting }) => {\r\n\t\t\t\t\tthis.onChange(values);\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t  alert(\"Call window.fetch with method: POST and pass:\\n\" + JSON.stringify(values, null, 2));\r\n\t\t\t\t\t  setSubmitting(false);\r\n\t\t\t\t\t}, 400);\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<Form>\r\n\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t<label style={{display:'inline-block', width:'50px'}} htmlFor=\"name\">Name:</label>\r\n\t\t\t\t\t\t<Field name=\"name\" type=\"text\" />\r\n\t\t\t\t\t\t<span className=\"text-danger\"><ErrorMessage name=\"name\"/></span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t<label style={{display:'inline-block', width:'50px'}} htmlFor=\"alias\">Alias:</label>\r\n\t\t\t\t\t\t<Field name=\"alias\" type=\"text\"/>\t\t\t\t\r\n\t\t\t\t\t\t<span className=\"text-danger\"><ErrorMessage name=\"alias\"/></span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t<label style={{display:'inline-block', width:'50px'}} htmlFor=\"breed\">Breed:</label>\r\n\t\t\t\t\t\t<Field name=\"breed\" type=\"text\" />\r\n\t\t\t\t\t\t<span className=\"text-danger\"><ErrorMessage name=\"breed\"/></span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<button type=\"submit\" className=\"btn btn-primary\">Save</button>\r\n\t\t\t\t</Form>\r\n\t\t\t</Formik>\r\n\t\t);\r\n\t}\r\n}","import React from 'react';\nimport './App.css';\nimport DogList from './DogList';\nimport DogEdit from './DogEdit';\n\nexport default class App extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t  error: null,\n\t\t  isLoaded: false,\n\t\t  items: [],\n\t\t  selected: -1\n\t\t};\n\t\t\n\t\tthis.onSelectedChange = this.onSelectedChange.bind(this);\n\t\tthis.onDogChange = this.onDogChange.bind(this);\n\t}\n\t\n\tonSelectedChange(index) {\n\t\tthis.setState({selected:index});\n\t}\n\t\n\tonDogChange(dog) {\n\t\tlet newItems = [...this.state.items];\n\t\tnewItems[this.state.selected] = dog;\n\t\tthis.setState({items: newItems});\n\t}\n\t\n\tcomponentDidMount() {\n\t\tfetch(\"dogs.json\")\n\t\t  .then(res => res.json())\n\t\t  .then(\n\t\t\t(result) => {\n\t\t\t  this.setState({\n\t\t\t\tisLoaded: true,\n\t\t\t\titems: result,\n\t\t\t\tselected: 0\n\t\t\t  });\n\t\t\t},\n\t\t\t// Note: it's important to handle errors here\n\t\t\t// instead of a catch() block so that we don't swallow\n\t\t\t// exceptions from actual bugs in components.\n\t\t\t(error) => {\n\t\t\t  this.setState({\n\t\t\t\tisLoaded: true,\n\t\t\t\terror\n\t\t\t  });\n\t\t\t}\n\t\t)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<div className=\"page-header mt-3\">\n\t\t\t\t\t\t<h1>\n\t\t\t\t\t\t\t<p className=\"lead\">Dog List - React toy app </p>\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"mt-5 row\">\n\t\t\t\t\t\t<DogList dogs={this.state.items} selected={this.state.selected} onSelectedChange={this.onSelectedChange}>\n\t\t\t\t\t\t</DogList>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"mt-5 row\">\n\t\t\t\t\t\t{ this.state.items && this.state.selected >= 0 && \n\t\t\t\t\t\t\t<DogEdit \n\t\t\t\t\t\t\t\tkey={this.state.selected} \n\t\t\t\t\t\t\t\tdog={this.state.items[this.state.selected]} \n\t\t\t\t\t\t\t\tonChange={this.onDogChange}>\n\t\t\t\t\t\t\t</DogEdit> }\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"mt-5 row\">\n\t\t\t\t\t\t<p>Click on dog name to edit</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<p>List of dogs is read from a static JSON file via AJAX. Save is just an alert as there is no backend code.</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<p>This is the Heroes app from angular, adapted for react</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}